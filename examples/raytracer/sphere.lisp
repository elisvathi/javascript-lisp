(require examples/raytracer/vector.lisp)
(require examples/raytracer/ray.lisp)

(defun s/create (c r)
  (pair (list 'center 'radius)
        (list c r)))

(defun s/center (sphere)
  (assoc 'center sphere))
(defun s/radius (sphere)
  (assoc 'radius sphere))

(defun s/intersect (sphere ray)
  (let ((r_orig (r/origin ray))
        (r_orig_x (v/x r_orig))
        (r_orig_y (v/y r_orig))
        (r_orig_z (v/z r_orig))
        (r_dir (r/direction ray))
        (r_dir_x (v/x r_dir))
        (r_dir_y (v/y r_dir))
        (r_dir_z (v/z r_dir))
        (s_center (s/center sphere))
        (s_center_x (v/x s_center))
        (s_center_y (v/y s_center))
        (s_center_z (v/z s_center))
        (s_radius (s/radius sphere))
        (a 1)
        (b (sum (list (* 2
                         (* (- r_orig_x s_center_x)
                            r_dir_x))
                      (* 2
                         (* (- r_orig_y s_center_y)
                            r_dir_y))
                      (* 2
                         (* (- r_orig_z s_center_z)
                            r_dir_z)))))
        (c (sum (list (pow (- r_orig_x s_center_x)
                           2)
                      (pow (- r_orig_y s_center_y)
                           2)
                      (- (pow (- r_orig_z s_center_z)
                              2)
                         (pow radius 2)))))
        (discriminant (- (* b b)
                         (* 4
                            (* a c))))
        (tolerance 0.00001))
    (cond
     ((> discriminant 0)
      (let (root_1 (- (/ (- (* b -1)
                            (sqrt discriminant))
                         (* a 2))
                      tolerance))
        (cond
         ((> root_1 0) root_1)
         ('t
          (- (/ (+ (* b -1)
                   (sqrt discriminant))
                (* 2 a))
             tolerance)))))
     ('t -1))))
